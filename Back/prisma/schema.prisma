generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  img         String?
  nombre      String
  email       String   @unique
  telefono    String   @unique
  password    String
  rol         String   @default("gerente")
  empresaId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imgPublicId String?
  empresa     Empresa? @relation("EmpresaUsuarios", fields: [empresaId], references: [id])
}

model Empresa {
  id          Int         @id @default(autoincrement())
  nombre      String
  nit         String      @unique
  direccion   String
  ciudad      String
  telefono    String
  email       String      @unique
  moneda      String
  zonaHoraria String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  articulos   Articulo[]
  bodegas     Bodega[]
  proveedores Proveedor[]
  usuarios    User[]      @relation("EmpresaUsuarios")
}

model Bodega {
  id         Int          @id @default(autoincrement())
  nombre     String
  direccion  String
  empresaId  Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  empresa    Empresa      @relation(fields: [empresaId], references: [id])
  compras    Compra[]
  inventario Inventario[]
}

model Articulo {
  id              Int                @id @default(autoincrement())
  nombre          String
  codigo          String             @unique
  descripcion     String?
  precio          Float
  empresaId       Int
  fotoPrincipal   String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  empresa         Empresa            @relation(fields: [empresaId], references: [id])
  articuloValores ArticuloVariante[]
  fotos           Foto[]
  precios         PrecioArticulo[]   @relation("ArticuloToPrecioArticulo")
  variantes       Variante[]         @relation("ArticuloToVariante")
}

model TipoPrecio {
  id      Int              @id @default(autoincrement())
  nombre  String           @unique
  creado  DateTime         @default(now())
  precios PrecioArticulo[]
}

model PrecioArticulo {
  id           Int        @id @default(autoincrement())
  articuloId   Int
  valor        Float
  creadoEn     DateTime   @default(now())
  actualizado  DateTime   @updatedAt
  tipoPrecioId Int
  articulo     Articulo   @relation("ArticuloToPrecioArticulo", fields: [articuloId], references: [id], onDelete: Cascade)
  tipoPrecio   TipoPrecio @relation(fields: [tipoPrecioId], references: [id])

  @@unique([articuloId, tipoPrecioId])
  @@index([articuloId])
}

model Variante {
  id             Int             @id @default(autoincrement())
  nombre         String
  sku            String          @unique
  articuloId     Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  detallesCompra CompraDetalle[]
  inventario     Inventario[]
  articulo       Articulo        @relation("ArticuloToVariante", fields: [articuloId], references: [id])
}

model Foto {
  id         Int      @id @default(autoincrement())
  url        String
  publicId   String   @unique
  orden      Int?
  articuloId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  articulo   Articulo @relation(fields: [articuloId], references: [id])
}

model Inventario {
  id         Int      @id @default(autoincrement())
  varianteId Int
  bodegaId   Int
  cantidad   Int      @default(0)
  bodega     Bodega   @relation(fields: [bodegaId], references: [id])
  variante   Variante @relation(fields: [varianteId], references: [id])

  @@unique([varianteId, bodegaId])
}

model TipoVariante {
  id      Int             @id @default(autoincrement())
  nombre  String          @unique
  valores ValorVariante[]
}

model ValorVariante {
  id              Int                @id @default(autoincrement())
  nombre          String
  tipoVarianteId  Int
  articuloValores ArticuloVariante[]
  tipoVariante    TipoVariante       @relation(fields: [tipoVarianteId], references: [id])
}

model ArticuloVariante {
  id         Int           @id @default(autoincrement())
  articuloId Int
  valorId    Int
  articulo   Articulo      @relation(fields: [articuloId], references: [id])
  valor      ValorVariante @relation(fields: [valorId], references: [id])

  @@unique([articuloId, valorId])
}

model Compra {
  id             Int              @id @default(autoincrement())
  proveedorId    Int
  tipoPago       TipoPago
  fecha          DateTime         @default(now())
  bodegaId       Int
  createdAt      DateTime         @default(now())
  bodega         Bodega           @relation(fields: [bodegaId], references: [id])
  proveedor      Proveedor        @relation(fields: [proveedorId], references: [id])
  detalles       CompraDetalle[]
  CuentaPorPagar CuentaPorPagar[]
}

model CompraDetalle {
  id          Int      @id @default(autoincrement())
  compraId    Int
  varianteId  Int
  cantidad    Int
  valorCompra Float
  valorVenta  Float
  compra      Compra   @relation(fields: [compraId], references: [id])
  variante    Variante @relation(fields: [varianteId], references: [id])
}

model Proveedor {
  id        Int      @id @default(autoincrement())
  nombre    String
  nit       String   @unique
  direccion String?
  telefono  String?
  email     String?
  empresaId Int
  compras   Compra[]
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
}

model CuentaPorPagar {
  id             Int                  @id @default(autoincrement())
  compraId       Int
  saldoTotal     Float
  saldoPendiente Float
  estado         EstadoCuentaPorPagar @default(PENDIENTE)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  abonos         AbonoCuenta[]
  compra         Compra               @relation(fields: [compraId], references: [id])
}

model AbonoCuenta {
  id               Int            @id @default(autoincrement())
  cuentaPorPagarId Int
  monto            Float
  fecha            DateTime       @default(now())
  cuentaPorPagar   CuentaPorPagar @relation(fields: [cuentaPorPagarId], references: [id])
}

enum TipoPago {
  contado
  credito
}

enum EstadoCuentaPorPagar {
  PENDIENTE
  PAGADA
  VENCIDA
}
